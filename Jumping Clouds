There is a new mobile game that starts with consecutively numbered clouds. Some of the clouds are thunderheads and others are cumulus.
The player can jump on any cumulus cloud having a number that is equal to the number of the current cloud plus 1 or2 .The player must avoid the thunderheads. 
Determine the minimum number of jumps it will take to jump from the starting postion to the last cloud. It is always possible to win the game.

For each game, you will get an array of clouds numbered 0 if they are safe or 1 if they must be avoided.


Solution - The max jump is 2 so we'll always try to achieve that and if that is thunderous then we go back 1 step and then continue in the same way(the first if condition).
But this might create a problem with the last value as the loop condition will be false by now. To solve this we add another test and check if we are at the second last position
and go back one position in order to be able to reach the last value of the array. Lastly, we subtract 1 from the total jumps because it'll increment once more after reaching the 
last value. This can be avoided by simply initializing jumps to -1.

public class Solution {

    // Complete the jumpingOnClouds function below.
    static int jumpingOnClouds(int[] c) {
        int jumps=0;
        for(int i=0; i<c.length; i+= 2){
            if(c[i] == 1){
                i--;
            }
            if(i == c.length-2){
                i--;
            }
            jumps++;
        }

        return jumps-1;
    }
